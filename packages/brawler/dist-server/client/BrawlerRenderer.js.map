{"version":3,"sources":["../../src/client/BrawlerRenderer.js"],"names":["PIXI","require","game","BrawlerRenderer","gameEngine","clientEngine","sprites","fighterSpriteScale","pixelsPerSpaceUnit","window","innerWidth","spaceWidth","innerHeight","spaceHeight","viewportWidth","viewportHeight","setDimensions","stage","Container","document","readyState","onDOMLoaded","addEventListener","bind","Promise","resolve","reject","loader","add","Object","keys","ASSETPATHS","map","x","name","url","load","isReady","setupStage","textures","IDLE","values","resources","idleSheet","JUMP","jumpSheet","FIGHT","meleeSheet","RUN","runSheet","DIE","dieSheet","DINO_IDLE","dinoIdleSheet","DINO_WALK","dinoWalkSheet","DINO_RUN","dinoRunSheet","DINO_JUMP","dinoJumpSheet","DINO_DIE","dinoDieSheet","isTouchDevice","body","classList","isMacintosh","isWindows","emit","renderer","resize","backgroundSprite","Sprite","background","texture","width","height","addChild","options","antialias","autoResize","resolution","devicePixelRatio","autoDetectRenderer","querySelector","appendChild","view","obj","y","left","groundLeft","middle","groundMiddle","right","groundRight","platformLeft","platformMiddle","platformRight","max","Math","floor","random","platformTextures","edgeWidth","platformUnit","middleWidth","sprite","leftEdge","rightEdge","extras","TilingSprite","middleHeight","scale","set","tileScale","stuffCount","i","stuff","randomInt","stuffSprite","id","position","fighterSprite","AnimatedSprite","SCALE_MODES","NEAREST","anchor","destroy","t","dt","world","forEachObject","spriteOffsetY","Fighter","isDino","getActionName","action","textureCount","length","progress","ACTIONS","velocity","jumpSpeed","image","gotoAndStop","direction","playerId","getElementById","innerHTML","kills","render","desertStuff_0","desertStuff_1","desertStuff_2","desertStuff_3","desertStuff_4","Renderer","navigator","platform","indexOf","maxTouchPoints"],"mappings":"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","sourcesContent":["import { Renderer } from 'lance-gg';\nimport Fighter from './../common/Fighter';\n\nlet PIXI = require('pixi.js');\nlet game = null;\n\nexport default class BrawlerRenderer extends Renderer {\n\n    constructor(gameEngine, clientEngine) {\n        super(gameEngine, clientEngine);\n        game = gameEngine;\n        this.sprites = {};\n        this.fighterSpriteScale = 1;\n    }\n\n    get ASSETPATHS() {\n        return {\n            background: 'assets/deserttileset/png/BG.png',\n            groundLeft: 'assets/deserttileset/png/Tile/1.png',\n            groundMiddle: 'assets/deserttileset/png/Tile/2.png',\n            groundRight: 'assets/deserttileset/png/Tile/3.png',\n            platformLeft: 'assets/deserttileset/png/Tile/14.png',\n            platformMiddle: 'assets/deserttileset/png/Tile/15.png',\n            platformRight: 'assets/deserttileset/png/Tile/16.png',\n            desertStuff_0: 'assets/deserttileset/png/Objects/Bush (1).png',\n            desertStuff_1: 'assets/deserttileset/png/Objects/Tree.png',\n            desertStuff_2: 'assets/deserttileset/png/Objects/Cactus (1).png',\n            desertStuff_3: 'assets/deserttileset/png/Objects/Stone.png',\n            desertStuff_4: 'assets/deserttileset/png/Objects/Skeleton.png',\n            idleSheet: 'assets/adventure_girl/png/Idle.json',\n            jumpSheet: 'assets/adventure_girl/png/Jump.json',\n            meleeSheet: 'assets/adventure_girl/png/Melee.json',\n            runSheet: 'assets/adventure_girl/png/Run.json',\n            dieSheet: 'assets/adventure_girl/png/Dead.json',\n            dinoIdleSheet: 'assets/dino/png/Idle.json',\n            dinoJumpSheet: 'assets/dino/png/Jump.json',\n            dinoWalkSheet: 'assets/dino/png/Walk.json',\n            dinoRunSheet: 'assets/dino/png/Run.json',\n            dinoDieSheet: 'assets/dino/png/Dead.json'\n        };\n    }\n\n    // expand viewport to maximize width or height\n    setDimensions() {\n        this.pixelsPerSpaceUnit = window.innerWidth / this.gameEngine.spaceWidth;\n        if (window.innerHeight < game.spaceHeight * this.pixelsPerSpaceUnit) {\n            this.pixelsPerSpaceUnit = window.innerHeight / game.spaceHeight;\n        }\n        this.viewportWidth = game.spaceWidth * this.pixelsPerSpaceUnit;\n        this.viewportHeight = game.spaceHeight * this.pixelsPerSpaceUnit;\n    }\n\n    // initialize renderer.\n    init() {\n        this.setDimensions();\n        this.stage = new PIXI.Container();\n\n        if (document.readyState === 'complete' || document.readyState === 'loaded' || document.readyState === 'interactive')\n            this.onDOMLoaded();\n        else\n            document.addEventListener('DOMContentLoaded', this.onDOMLoaded.bind(this));\n\n        return new Promise((resolve, reject) => {\n            PIXI.loader.add(Object.keys(this.ASSETPATHS).map((x) => {\n                return {\n                    name: x,\n                    url: this.ASSETPATHS[x]\n                };\n            }))\n            .load(() => {\n                this.isReady = true;\n                this.setupStage();\n\n                this.textures = {\n                    IDLE: Object.values(PIXI.loader.resources.idleSheet.textures),\n                    JUMP: Object.values(PIXI.loader.resources.jumpSheet.textures),\n                    FIGHT: Object.values(PIXI.loader.resources.meleeSheet.textures),\n                    RUN: Object.values(PIXI.loader.resources.runSheet.textures),\n                    DIE: Object.values(PIXI.loader.resources.dieSheet.textures),\n                    DINO_IDLE: Object.values(PIXI.loader.resources.dinoIdleSheet.textures),\n                    DINO_WALK: Object.values(PIXI.loader.resources.dinoWalkSheet.textures),\n                    DINO_RUN: Object.values(PIXI.loader.resources.dinoRunSheet.textures),\n                    DINO_JUMP: Object.values(PIXI.loader.resources.dinoJumpSheet.textures),\n                    DINO_DIE: Object.values(PIXI.loader.resources.dinoDieSheet.textures)\n                };\n\n                if (isTouchDevice()) document.body.classList.add('touch');\n                else if (isMacintosh()) document.body.classList.add('mac');\n                else if (isWindows()) document.body.classList.add('pc');\n\n                resolve();\n                this.gameEngine.emit('renderer.ready');\n            });\n        });\n\n    }\n\n    // add background sprite\n    setupStage() {\n        window.addEventListener('resize', () => {\n            this.setDimensions();\n            this.renderer.resize(this.viewportWidth, this.viewportHeight);\n        });\n        this.stage.backgroundSprite = new PIXI.Sprite(PIXI.loader.resources.background.texture);\n        this.stage.backgroundSprite.width = this.viewportWidth;\n        this.stage.backgroundSprite.height = this.viewportHeight;\n        this.stage.addChild(this.stage.backgroundSprite);\n    }\n\n    onDOMLoaded() {\n        let options = {\n            width: this.viewportWidth,\n            height: this.viewportHeight,\n            antialias: true,\n            autoResize: true,\n            resolution: window.devicePixelRatio || 1\n        };\n        this.renderer = PIXI.autoDetectRenderer(options);\n        document.body.querySelector('.pixiContainer').appendChild(this.renderer.view);\n    }\n\n    platformTextures(obj) {\n        if (obj.y === 0) {\n            return {\n                left: PIXI.loader.resources.groundLeft.texture,\n                middle: PIXI.loader.resources.groundMiddle.texture,\n                right: PIXI.loader.resources.groundRight.texture\n            };\n        }\n        return {\n            left: PIXI.loader.resources.platformLeft.texture,\n            middle: PIXI.loader.resources.platformMiddle.texture,\n            right: PIXI.loader.resources.platformRight.texture\n        };\n    }\n\n    randomInt(max) {\n        return Math.floor(Math.random() * Math.floor(max));\n    }\n\n    // add a single platform game object\n    addPlatform(obj) {\n\n        // create sprites for platform edges, and middle-section\n        let textures = this.platformTextures(obj);\n        let edgeWidth = game.platformUnit;\n        let middleWidth = obj.width - (2 * edgeWidth);\n        let sprite = new PIXI.Container();\n        let leftEdge = new PIXI.Sprite(textures.left);\n        let rightEdge = new PIXI.Sprite(textures.right);\n        let middle = new PIXI.extras.TilingSprite(textures.middle);\n        let middleHeight = edgeWidth / middle.texture.width * middle.texture.height;\n\n        // scale the sprites and tile, set the middle-section width\n        let scale = edgeWidth * this.pixelsPerSpaceUnit / leftEdge.width;\n        leftEdge.scale.set(scale, scale);\n        rightEdge.scale.set(scale, scale);\n        middle.tileScale.set(scale, scale);\n        middle.width = middleWidth * this.pixelsPerSpaceUnit;\n        middle.height = middleHeight * this.pixelsPerSpaceUnit;\n\n        // position the sprites inside container\n        middle.x = edgeWidth * this.pixelsPerSpaceUnit;\n        rightEdge.x = middle.x + middleWidth * this.pixelsPerSpaceUnit;\n        sprite.addChild(leftEdge);\n        sprite.addChild(middle);\n        sprite.addChild(rightEdge);\n\n        // add desert stuff\n        let stuffCount = Math.max(1, obj.width / game.platformUnit / 4);\n        for (let i = 0; i < stuffCount; i++) {\n            let stuff = PIXI.loader.resources['desertStuff_' + this.randomInt(5)];\n            let stuffSprite = new PIXI.Sprite(stuff.texture);\n            stuffSprite.scale.set(scale, scale);\n            stuffSprite.x = this.randomInt(rightEdge.x);\n            stuffSprite.y = 0 - (stuffSprite.height);\n            sprite.addChild(stuffSprite);\n        }\n        this.sprites[obj.id] = sprite;\n        sprite.position.set(obj.position.x, obj.position.y);\n        this.stage.addChild(sprite);\n    }\n\n    // add a single fighter game object\n    addFighter(obj) {\n        let sprite = new PIXI.Container();\n        sprite.fighterSprite = new PIXI.extras.AnimatedSprite(this.textures.IDLE,PIXI.SCALE_MODES.NEAREST);\n        this.fighterSpriteScale = obj.height * this.pixelsPerSpaceUnit / sprite.fighterSprite.height;\n        sprite.fighterSprite.scale.set(this.fighterSpriteScale, this.fighterSpriteScale);\n        sprite.fighterSprite.anchor.set(0.25, 0.0);\n        sprite.addChild(sprite.fighterSprite);\n        this.sprites[obj.id] = sprite;\n        sprite.position.set(obj.position.x, obj.position.y);\n        this.stage.addChild(sprite);\n    }\n\n    // remove a fighter\n    removeFighter(obj) {\n        let sprite = this.sprites[obj.id];\n        if (sprite) {\n            if (sprite.fighterSprite) sprite.fighterSprite.destroy();\n            sprite.destroy();\n        }\n    }\n\n    // draw all game objects\n    draw(t, dt) {\n        super.draw(t, dt);\n\n        if (!this.isReady) return; // assets might not have been loaded yet\n\n        game.world.forEachObject((id, obj) => {\n            let sprite = this.sprites[obj.id];\n            let spriteOffsetY = 0;\n            if (obj instanceof Fighter) {\n                if (obj.isDino) {\n                    sprite.fighterSprite.textures = this.textures[`DINO_${Fighter.getActionName(obj.action)}`]\n                    spriteOffsetY = -3;\n                } else {\n                    sprite.fighterSprite.textures = this.textures[Fighter.getActionName(obj.action)];\n                    spriteOffsetY = -1;\n                }\n\n                let textureCount = sprite.fighterSprite.textures.length;\n                let progress = (99 - obj.progress)/100;\n                if (obj.action === Fighter.ACTIONS.JUMP) {\n                    progress = (obj.velocity.y + this.gameEngine.jumpSpeed) / (this.gameEngine.jumpSpeed * 2);\n                    if (progress < 0) progress = 0;\n                    if (progress >= 1) progress = 0.99;\n                }\n                let image = Math.floor(progress * textureCount);\n                sprite.fighterSprite.gotoAndStop(image);\n\n                sprite.fighterSprite.scale.set(obj.direction * this.fighterSpriteScale, this.fighterSpriteScale);\n                sprite.fighterSprite.anchor.x = obj.direction==1?0.25:0.75;\n\n                if (obj.playerId === this.gameEngine.playerId)\n                    document.getElementById('killsStatus').innerHTML = `kills: ${obj.kills}`;\n            }\n            sprite.x = obj.position.x * this.pixelsPerSpaceUnit;\n            sprite.y = this.viewportHeight - (obj.position.y + obj.height + spriteOffsetY) * this.pixelsPerSpaceUnit;\n        });\n\n        this.renderer.render(this.stage);\n    }\n}\n\nfunction isMacintosh() { return navigator.platform.indexOf('Mac') > -1; }\nfunction isWindows() { return navigator.platform.indexOf('Win') > -1; }\nfunction isTouchDevice() { return 'ontouchstart' in window || navigator.maxTouchPoints; }\n"],"file":"BrawlerRenderer.js"}