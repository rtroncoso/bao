{"version":3,"sources":["../../src/server/BrawlerServerEngine.js"],"names":["game","BrawlerServerEngine","io","gameEngine","inputOptions","on","postStep","bind","addPlatform","x","y","width","platformUnit","i","dinoCount","f","addFighter","isDino","direction","f1","f2","action","Fighter","ACTIONS","DIE","killDistance","FIGHT","dinoKillDistance","dx","Math","abs","position","dy","kills","progress","RUN","walkSpeed","removeObjectFromWorld","random","nextAction","floor","Object","values","length","JUMP","velocity","jumpSpeed","inputApplied","inputsApplied","indexOf","playerId","IDLE","fighters","world","queryObjects","instanceType","updateDinoAction","updateFighterAction","max","min","spaceWidth","fighterWidth","checkKills","socket","socketId","o","id","ServerEngine"],"mappings":"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","sourcesContent":["import { ServerEngine } from 'lance-gg';\nimport Fighter from '../common/Fighter';\n\nlet game = null;\n\nexport default class BrawlerServerEngine extends ServerEngine {\n\n    constructor(io, gameEngine, inputOptions) {\n        super(io, gameEngine, inputOptions);\n        game = gameEngine;\n        game.on('postStep', this.postStep.bind(this));\n    }\n\n    start() {\n        super.start();\n\n        // add floor\n        game.addPlatform({ x: 0, y: 0, width: game.platformUnit * 20 });\n\n        // add platforms\n        game.addPlatform({ x: 10, y: 20, width: game.platformUnit * 3 });\n        game.addPlatform({ x: 50, y: 30, width: game.platformUnit * 3 });\n        game.addPlatform({ x: 90, y: 30, width: game.platformUnit * 3 });\n        game.addPlatform({ x: 130, y: 20, width: game.platformUnit * 3 });\n\n        // add dinos\n        for (let i = 0; i < game.dinoCount; i++) {\n            let f = game.addFighter(0);\n            f.isDino = true;\n            f.direction = 1;\n        }\n    }\n\n    // check if fighter f1 killed f2\n    checkKills(f1, f2) {\n\n        // if f2 is already dying, exit\n        if (f1 === f2 || f2.action === Fighter.ACTIONS.DIE)\n            return;\n\n        // kill distance is different for fighters and dino's\n        let killDistance = null;\n        if (f1.action === Fighter.ACTIONS.FIGHT)\n            killDistance = game.killDistance;\n        else if (f1.isDino && !f2.isDino)\n            killDistance = game.dinoKillDistance;\n\n        if (killDistance === null) return;\n\n        let dx = Math.abs(f1.position.x - f2.position.x);\n        let dy = Math.abs(f1.position.y - f2.position.y);\n        if (dx <= killDistance && dy <= killDistance) {\n            f1.kills++;\n            f2.action = Fighter.ACTIONS.DIE;\n            f2.progress = 99;\n        }\n    }\n\n    // handle Dino state change\n    updateDinoAction(f1) {\n\n        // Dinos keep walking\n        if (f1.action === Fighter.ACTIONS.RUN)\n            f1.position.x += game.walkSpeed * f1.direction;\n\n        // end-of-action handling\n        if (f1.progress === 0) {\n            f1.progress = 99;\n\n            // end of dying sequence\n            if (f1.action === Fighter.ACTIONS.DIE) {\n\n                // Dino fighters come back to life\n                if (f1.isDino) {\n                    let f = game.addFighter(0);\n                    f.isDino = true;\n                    f.direction = 1;\n                }\n                game.removeObjectFromWorld(f1);\n                return;\n            }\n\n            // choose direction and action\n            if (Math.random() > 0.7) f1.direction *= -1;\n            let nextAction = Math.floor(Object.values(Fighter.ACTIONS).length * Math.random());\n            if (nextAction !== Fighter.ACTIONS.DIE && nextAction !== Fighter.ACTIONS.FIGHT)\n                f1.action = nextAction;\n            if (nextAction === Fighter.ACTIONS.JUMP && f1.velocity.length() === 0)\n                f1.velocity.y = game.jumpSpeed;\n        }\n    }\n\n    // handle fighter state change\n    updateFighterAction(f1) {\n\n        // if no input applied and we were running, switch to idle\n        let inputApplied = game.inputsApplied.indexOf(f1.playerId) >= 0;\n        if (!inputApplied && f1.action === Fighter.ACTIONS.RUN)\n            f1.action = Fighter.ACTIONS.IDLE;\n\n        // end-of-action handling\n        if (f1.progress === 0) {\n            f1.progress = 99;\n\n            // end of dying sequence\n            if (f1.action === Fighter.ACTIONS.DIE) {\n                game.removeObjectFromWorld(f1);\n                return;\n            }\n\n            // if no input applied on this turn, switch to idle\n            if (!inputApplied && f1.action === Fighter.ACTIONS.FIGHT)\n                f1.action = Fighter.ACTIONS.IDLE;\n        }\n    }\n\n    // post-step state transitions\n    postStep() {\n\n        let fighters = game.world.queryObjects({ instanceType: Fighter });\n        for (let f1 of fighters) {\n\n            // updates to action\n            if (f1.isDino)\n                this.updateDinoAction(f1);\n            else\n                this.updateFighterAction(f1);\n\n            // check world bounds\n            f1.position.x = Math.max(f1.position.x, 0);\n            f1.position.x = Math.min(f1.position.x, game.spaceWidth - game.fighterWidth);\n\n            // check for kills\n            for (let f2 of fighters) this.checkKills(f1, f2);\n        }\n\n        // reset input list\n        game.inputsApplied = [];\n    }\n\n    onPlayerConnected(socket) {\n        super.onPlayerConnected(socket);\n        game.addFighter(socket.playerId);\n    }\n\n    onPlayerDisconnected(socketId, playerId) {\n        super.onPlayerDisconnected(socketId, playerId);\n        for (let o of game.world.queryObjects({ playerId }))\n            game.removeObjectFromWorld(o.id);\n    }\n}\n"],"file":"BrawlerServerEngine.js"}