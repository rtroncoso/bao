{"version":3,"sources":["../../src/common/BrawlerGameEngine.js"],"names":["BrawlerGameEngine","options","Object","assign","dinoCount","spaceWidth","spaceHeight","fighterWidth","fighterHeight","jumpSpeed","walkSpeed","killDistance","dinoKillDistance","platformUnit","platformHeight","physicsEngine","SimplePhysicsEngine","gravity","TwoVector","collisions","type","autoResolve","gameEngine","inputsApplied","on","moveAll","bind","serializer","registerClass","Platform","Fighter","inputData","playerId","fighter","world","queryObject","instanceType","action","ACTIONS","DIE","FIGHT","JUMP","input","position","x","direction","nextAction","RUN","velocity","length","y","IDLE","progress","refreshToPhysics","push","stepInfo","isReenact","fighters","queryObjects","f1","f","randomPosition","height","width","kills","addObjectToWorld","desc","p","isStatic","Math","random","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Fighter from './Fighter';\nimport Platform from './Platform';\n\nexport default class BrawlerGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n\n        // game variables\n        Object.assign(this, {\n            dinoCount: 2, spaceWidth: 160, spaceHeight: 90,\n            fighterWidth: 7, fighterHeight: 12, jumpSpeed: 1.5,\n            walkSpeed: 0.6, killDistance: 18, dinoKillDistance: 12,\n            platformUnit: 8, platformHeight: 5\n        });\n\n        this.physicsEngine = new SimplePhysicsEngine({\n            gravity: new TwoVector(0, -0.05),\n            collisions: { type: 'bruteForce', autoResolve: true },\n            gameEngine: this\n        });\n\n        this.inputsApplied = [];\n        this.on('preStep', this.moveAll.bind(this));\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Platform);\n        serializer.registerClass(Fighter);\n    }\n\n    processInput(inputData, playerId) {\n\n        super.processInput(inputData, playerId);\n\n        // handle keyboard presses:\n        // right, left - set direction and move fighter in that direction.\n        // up          - start jump sequence\n        // space       - start the fight sequence\n        let fighter = this.world.queryObject({ playerId: playerId, instanceType: Fighter });\n        if (fighter) {\n\n            // if fighter is dying or fighting, ignore actions\n            if (fighter.action === Fighter.ACTIONS.DIE ||\n                fighter.action === Fighter.ACTIONS.FIGHT) {\n                return;\n            } else if (fighter.action === Fighter.ACTIONS.JUMP) {\n                // else fighter is jumping, so fighter can move\n                if (inputData.input === 'right') {\n                    fighter.position.x += this.walkSpeed;\n                    fighter.direction = 1;\n                } else if (inputData.input === 'left') {\n                    fighter.position.x -= this.walkSpeed;\n                    fighter.direction = -1;\n                }\n            } else {\n                // else fighter is either idle, or running\n                let nextAction = null;\n                if (inputData.input === 'right') {\n                    fighter.position.x += this.walkSpeed;\n                    fighter.direction = 1;\n                    nextAction = Fighter.ACTIONS.RUN;\n                } else if (inputData.input === 'left') {\n                    fighter.position.x -= this.walkSpeed;\n                    fighter.direction = -1;\n                    nextAction = Fighter.ACTIONS.RUN;\n                } else if (inputData.input === 'up') {\n                    if (fighter.velocity.length() === 0)\n                        fighter.velocity.y = this.jumpSpeed;\n                    nextAction = Fighter.ACTIONS.JUMP;\n                } else if (inputData.input === 'space') {\n                    nextAction = Fighter.ACTIONS.FIGHT;\n                } else {\n                    nextAction = Fighter.ACTIONS.IDLE;\n                }\n                if (fighter.action !== nextAction)\n                    fighter.progress = 99;\n                fighter.action = nextAction;\n            }\n            // update physics, and remember that an input was applied on this turn\n            fighter.refreshToPhysics();\n            this.inputsApplied.push(playerId);\n        }\n    }\n\n    // logic for every game step\n    moveAll(stepInfo) {\n\n        if (stepInfo.isReenact)\n            return;\n\n        // advance animation progress for all fighters\n        let fighters = this.world.queryObjects({ instanceType: Fighter });\n\n        // update action progress\n        for (let f1 of fighters) {\n            f1.progress -= 6;\n            if (f1.progress < 0) f1.progress = 0;\n\n            // stop jumps\n            if (f1.action === Fighter.ACTIONS.JUMP &&\n                f1.velocity.y === 0) {\n                f1.action = Fighter.ACTIONS.IDLE;\n            }\n        }\n    }\n\n    // create fighter\n    addFighter(playerId) {\n        let f = new Fighter(this, null, { playerId, position: this.randomPosition() });\n        f.height = this.fighterHeight;\n        f.width = this.fighterWidth;\n        f.direction = 1;\n        f.progress = 0;\n        f.action = 0;\n        f.kills = 0;\n        this.addObjectToWorld(f);\n        return f;\n    }\n\n    // create a platform\n    addPlatform(desc) {\n        let p = new Platform(this, null, { playerId: 0, position: new TwoVector(desc.x, desc.y) });\n        p.width = desc.width;\n        p.height = this.platformHeight;\n        p.isStatic = 1;\n        this.addObjectToWorld(p);\n        return p;\n    }\n\n    // random position for new object\n    randomPosition() {\n        return new TwoVector(this.spaceWidth / 4 + Math.random() * this.spaceWidth/2, 70);\n    }\n}\n"],"file":"BrawlerGameEngine.js"}